Account 도메인 클래스
필요한 data  로그인
             프로필
             알림설정

Annotation

@Entity
클래스를 자동으로 DB 테이블과 mapping 시켜줌

@Id
DB 테이블 Primary Key 를 의미함
Primary Key 무결성 제약조건 부여

@GeneratedValue
Primary Key 생성을 DB가 자동으로 하도록 함

@Getter
getter 를 자동으로 만듬

@Setter
setter 를 자동으로 만듬

@EqualsAndHashCode
equals 메소드와 hashCode 메소드를 자동으로 overriding 함
(of = "id") - 멤버변수 중에서 id 값이 같을 때만 true 를 반환하게 함

@Builder
Object(객체) 를 생성할 때 생성자를 통해서 생성하도록 함

@AllArgsConstructor
모든 멤버변수를 매개변수로 하는 생성자

@NoArgsConstructor
기본 생성자

@Column(unique = true)
unique key 무결성 제약조건 부여

@Lob
DB 의 BLOB type 과 mapping 시킴
대용량의 binary data 를 위한 type

@Basic
java 의 primitive type 을 명시적으로 mapping 시킴

fetch = FetchType.EAGER
즉시 로딩

fetch = FetchType.LAZY
지연 로딩


[회원가입]
Controller
GET(/sign-up) 요청(request)을 받아서
account/sign-up.html 페이지에 보여줌

회원가입 폼에서 입력받을 수 있는 정보를
닉네임, 이메일, 패스워드 폼 객체로 제공함

닉네임, 이메일, 패스워드를 가지고 있는
  ㄴ form 에서 사용하는 객체들
폼 객체 들을 Model 객체에 넣어줌


Account 와 관련된 repository service controller 들을
모아두는 account package 생성하기

com.global.account package

AccountController 클래스

@Controller
해당 클래스가 Controller 역할을 하는 클래스라고
SpringFramework 에게 알려줌

@GetMapping
요청방식이 GET 으로 들왔을 때 반응함
/  : root 를 의미함
/sign-up : root 하위의 sign-up 을 의미함

signUpForm(Model model) 메소드
/sign-up 요청이 들어오면 동작하는 메소드
Model 객체를 parameter 로 받음

return "account/sign-up"
Spring Boot 가 제공하는 자동 설정에 의해서
templates directory 의 하위 director 인
account 에 있는 sign-up.html 파일을
response 한다는 의미

[Spring Security 설정]

package com.global.config
public class SecurityConfig

@Configuration
이 어노테이션이 붙은 클래스에서는
설정에 관련한 code 를 작성함
이 어노테이션이 붙은 클래스를 설정파일로
SpringFrameWork 에 등록함

@EnableWebSecurity
웹 보안을 활성화함
이 어노테이션이 붙은 클래스에서 보안설정을 함
WebSecurityConfigurerAdapter 클래스를 상속받으면
보안 설정을 보다 쉽게 할 수 있음
configure() 메소드를 overriding 해서
특정 요청들에 대해서는 Security check 를 하지 않도록
할 수 있음

public class SecurityConfig 클래스 작성할 때
extends WebSecurityConfigurerAdapter 상속
단축키  Ctrl + O  <-- overriding
목록 중에 configure(http:HttpSecurity) 선택하고
OK 버튼 누름




webpage 접속할 때

id주소(도메인주소):port번호/
127.0.0.1:8080/
localhost:8080/
localhost:8080/sign-up


<test>

[main 디렉토리 com.global.account 패키지]
@Controller
public class AccountController{}
 소스에서 Ctrl + Shift + T  를  누르면
 이 클래스에 대한 Test 클래스를 생성하는
 대화상자가 열림
  <- AccountControllerTest 클래스는
     test 디렉토리 밑에
     com.global.account 패키지에 생성됨

[test 디렉토리 com.global.account 패키지]
@SpringBootTest
@AutoConfigureMockMvc
class AccountControllerTest

@SpringBootTest
통합 테스트를 제공함

@AutoConfigureMockMvc
@Controller 과 @Service, @Repository 이
붙은 클래스의 객체들을 모두 메모리에 올림
  ㄴ 테스트 대상으로 삼음

@Autowired
Spring FrameWork 가 자동으로 의존성을 주입함
                   dependency  injection

@DisplayName("회원가입화면이 보이는지 테스트하기")
@Test
void signUpForm() throws Exception{}

@Test
Test 클래스로 지정한 클래스의 메소드를 테스트함

perform(get("/sign-up"))
  : /sign-up 요청 보내기
andDo(print())
  : get("/sign-up") 에서 접근한
    sign-up.html 소스를 출력함
andExpect(status().isOk())
  : status().isOk() 의 code 는 200 임
    request 와 response 가
    정상적인지 확인하기
andExpect(view().name("account/sign-up"));
  : account/sign-up  <-- request(요청)
  : view 가 제대로 보이는지 확인하기


< 회웝가입 : View >

Bootstrap 4
  네비게이션바
  폼

타입리프
  SignUpForm type 객체를 폼 type 객체로 설정함

  아래 code 추가
  <html lang="en" xmlns:th="http://www.thymeleaf.org">

HTML, CSS, JavaScript
  검증 기능
     nickname (3~20 자, 필수)
     email (이메일 형식, 필수)
     password (8 ~ 50 자, 필수)

sign-up.html 에서
<img src="/images/logo.png" width="30" height="30">
이렇게 해도 이미지가 안 나오면 Security 설정을 해야 함

SecurityConfig 클래스에서
Ctrl + O 를 눌러서
configure(WebSecurity web) 메소드를
overriding 함

  @Override
  public void configure(WebSecurity web) throws Exception {
    web.ignoring()
      .requestMatchers(PathRequest.toStaticResources().atCommonLocations());
  }

com.global.account 패키지에
SignUpForm 클래스 작성하기

@Data
클래스에 setter 와 getter 를 자동으로 만들어줌

AccountController 클래스의
singUpForm(Model model) 메소드에서
파라미터로 전달된 Model 객체 사용하기


20221221


AccountController
@PostMapping("/sign-up")
  public String signUpSubmit(@Valid @ModelAttribute SignUpForm signUpForm){ }

import javax.validation.Valid;
  ㄴ  자동으로 인식 안 되서 add maven dependency 진행함

@Valid - 객체의 제약조건을 검증함

@ModelAttribute - 파라미터로 들어오는 객체를 mapping 해 줌
                  파라미터로 들어오는 객체를 Getter, Setter, 생성자를
                  통해서 주입하기(injection) 위해서 사용함
                  일반 변수로는 전달이 안 되고 Model 객체를 통해서 전달해야 함
                  생략할 수 있음

@Component  <-- 개발자가 작성한 Class 를 Bean 으로 등록함
                Bean : Spring Framework 가 자동으로 생성한 객체
public class SignUpFormValidator implements Validator {}

@Bean  <-- 외부 라이브러리(클래스) 를 Bean 으로 등록함

(Bean 으로 등록한다는 것은 SpringFramework 가 자동으로 객체를 생성해서
 Spring Container (Spring 이 관리하는 메모리 공간) 에 올린다는 것)

@RequiredArgsConstructor
 private 이면서 final 인 멤버변수를
 초기화하는 생성자를 추가해 줌
 private 이라고 해도 final 이 아니면
 이를 초기화하는 생성자를 추가하지는 않음


@Transactional(readOnly=true)
트랜잭션을 읽기 전용 모드로 설정함

@InitBinder("signForm")
signUpForm 이라는 data를 받을 때
binder 를 설정해 줌
WebDataBinder type 의 파라미터를 선언함
 ㄴ @InitBinder type 의
    signUpForm이

     public void initBinder(WebDataBinder webDataBinder){
         // webDataBinder
         webDataBinder.addValidators(signUpFormValidator);
       }









